homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
clear
exit
table(
)
prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
# hypothesis test of random vs favored
# H_0: p=0.5, H_1: p =/= 0.5
oddsmaker_hyp_test = prop.test(
table(nfl$fav_win),
p=0.5,
alternative="two.sided",
correct=FALSE
)
# hypothesis test of home adv
homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
# how often are the points scored by the fav - un >= spread
nfl$fav_un_geq_spread = ifelse(
nfl$fav_pts - nfl$un_pts >= nfl$pt_spread,
TRUE,
FALSE
)
# how often the spread is covered is truth count over total
phat_spread = sum(nfl$fav_un_geq_spread, na.rm=TRUE) / length(nfl$fav_un_geq_spread)
# do a hypothesis test that the spread is covered more than half the time
spread_hyp_test = prop.test(
table(nfl$fav_un_geq_spread),
p=0.5,
alternative="greater",
correct=FALSE
)
View(spread_hyp_test)
table(nfl$fav_un_geq_spread)
se_phat_spread = sqrt((phat_spread(1-phat_spread))/length(nfl$fav_un_geq_spread))
# how often the spread is covered is truth count over total
phat_spread = sum(nfl$fav_un_geq_spread, na.rm=TRUE) / length(nfl$fav_un_geq_spread)
se_phat_spread = sqrt((phat_spread(1-phat_spread))/length(nfl$fav_un_geq_spread))
se_phat_spread = sqrt((phat_spread*(1-phat_spread))/length(nfl$fav_un_geq_spread))
ci_min = phat_spread - z_star*se_phat_spread
z_star = 1.965
ci_min = phat_spread - z_star*se_phat_spread
ci_max = phat_spread + z_star*se_phat_spread
margin_of_error = z_star*se_phat_spread
# calculate the confidence interval
ci_min = phat_spread - margin_of_error
ci_max = phat_spread + margin_of_error
# hypothesis test of random vs favored
# H_0: p=0.5, H_1: p =/= 0.5
oddsmaker_hyp_test = prop.test(
table(nfl$fav_win),
p=0.5,
alternative="greater",
correct=FALSE
)
# hypothesis test of random vs favored
# H_0: p=0.5, H_1: p =/= 0.5
oddsmaker_hyp_test = prop.test(
table(nfl$fav_win),
p=0.5,
alternative="less",
correct=FALSE
)
prop.test(
+   table(nfl$fav_win),
+   p=0.5,
prop.test(
+   table(nfl$fav_win),
+   p=0.5,
prop.test(table(nfl$fav_win), p=0.5, alternative="less", correct=FALSE
)
prop.test(table(nfl$fav_win), p=0.5, alternative="greater", correct=FALSE)
table(nfl$fav_win)
prop.test(table(nfl$fav_win), p=0.5, alternative="greater", correct=FALSE)
prop.test(table(nfl$fav_win), p=0.5, alternative="less", correct=FALSE)
prop.test(table(nfl$fav_win), p=0.5, alternative="greater", correct=FALSE)
prop.test(table(nfl$fav_win), p=0.5, alternative="less", correct=FALSE)
table(!nfl$fav_win)
table(!nfl$fav_win).TRUE
table(!nfl$fav_win).true
# hypothesis test of random vs favored
# H_0: p = 0.5, H_1: p > 0.5
# have to invert it because R inverts my table :(
# change to manual entry of n/p and stuff
oddsmaker_hyp_test = prop.test(
x=sum(nfl$fav_win, na.rm=TRUE),
n=length(nfl$fav_win),
p=0.5,
alternative="less",
correct=FALSE
)
table(!nfl$fav_win)prop.test(
prop.test(
x=sum(nfl$fav_win, na.rm=TRUE),
n=length(nfl$fav_win),
p=0.5,
alternative="less",
correct=FALSE
)
prop.test(
x=sum(nfl$fav_win, na.rm=TRUE),
n=length(nfl$fav_win),
p=0.5,
alternative="greater",
correct=FALSE
)
prop.test(
x=sum(nfl$fav_win, na.rm=TRUE),
n=length(nfl$fav_win),
p=0.5,
alternative="less",
correct=FALSE
)
# hypothesis test of random vs favored
# H_0: p = 0.5, H_1: p > 0.5
# have to invert it because R inverts my table :(
# change to manual entry of n/p and stuff
oddsmaker_hyp_test = prop.test(
x=sum(nfl$fav_win, na.rm=TRUE),
n=length(nfl$fav_win),
p=0.5,
alternative="greater",
correct=FALSE
)
# hypothesis test of home adv
homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
nfl$fav_un_geq_spread = nfl$fav_pts - nfl$un_pts >= nfl$pt_spread
# import packages
require("ggplot2")
require("latex2exp")
# define location to dataset
nfl_data_file = file.path("nfl.csv")
nfl = read.csv(nfl_data_file)
# random guess vs oddsmakers
# define a new variable fav_win
# fav_win is true if the favored team pts > un pts
nfl$fav_win = nfl$fav_pts > nfl$un_pts
# hypothesis test of random vs favored
# H_0: p = 0.5, H_1: p > 0.5
# have to invert it because R inverts my table :(
# change to manual entry of n/p and stuff
oddsmaker_hyp_test = prop.test(
x=sum(nfl$fav_win, na.rm=TRUE),
n=length(nfl$fav_win),
p=0.5,
alternative="greater",
correct=FALSE
)
# hypothesis test of home adv
homeadv_hyp_test = prop.test(
table(nfl$fav_win, nfl$home),
alternative="two.sided",
correct=FALSE
)
# how often are the points scored by the fav - un >= spread
nfl$fav_un_geq_spread = nfl$fav_pts - nfl$un_pts >= nfl$pt_spread
# how often the spread is covered is truth count over total
# calculate a point-estimate
phat_spread = sum(nfl$fav_un_geq_spread, na.rm=TRUE) / length(nfl$fav_un_geq_spread)
# calculate the margin of error
se_phat_spread = sqrt((phat_spread*(1-phat_spread))/length(nfl$fav_un_geq_spread))
z_star = 1.965
margin_of_error = z_star*se_phat_spread
# calculate the confidence interval
ci_min = phat_spread - margin_of_error
ci_max = phat_spread + margin_of_error
load("nc.Rdata")
load("data/nc.Rdata")
# import libraries
require("ggplot2")
require("latex2exp")
# load the data
load("data/nc.Rdata")
View(nc)
length(nc$lowbirthweight)
table(nc$habit, nc$lowbirthweight)
chisq.test(table(nc$habit, nc$lowbirthweight))
# part 1. chi-square test on low birth weight
# in smoking and non-smoking mothers
# H_0: there is no difference
# H_1: there is a difference
pval_pt1 = chisq.test(table(nc$habit, nc$lowbirthweight))
View(pval_pt1)
View(pval_pt1)
pval_pt1.p.value
pval_pt1$p.value
print(pval_pt1$p.value)
# part 1. chi-square test on low birth weight
# in smoking and non-smoking mothers
# H_0: there is no difference
# H_1: there is a difference
pval_pt1 = chisq.test(table(nc$lowbirthweight, nc$habit))
pval_pt1$p.value
# part 1. chi-square test on low birth weight
# in smoking and non-smoking mothers
# H_0: there is no difference
# H_1: there is a difference
pval_pt1 = chisq.test(table(nc$habit, nc$lowbirthweight))
pval_pt1$p.value
# part 2. a 90% confidence interval for the
# weight gained by mother during pregnancy
mean_gain = mean(nc$gained)
mean_gain
# remove rows that contain an NA in the gain column
gain_data = na.omit(nc$gained)
# part 2. a 90% confidence interval for the
# weight gained by mother during pregnancy
mean_gain = mean(gain_data)
n_samples = length(gain_data)
error_margin = qt(0.9, n_samples - 1)
margin_error = qt(0.9, n_samples - 1)*(sd(gain_data)/sqrt(n_samples))
margin_error = qt(90, n_samples - 1)*(sd(gain_data)/sqrt(n_samples))
margin_error = qt(9, n_samples - 1)*(sd(gain_data)/sqrt(n_samples))
margin_error = qt(0.9, n_samples - 1)*(sd(gain_data)/sqrt(n_samples))
sd(gain_data)
sd(gain_data)/sqrt(n_samples)
qt(0.9, n_samples - 1)
ci_low = mean_gain - margin_error
ci_hi = mean_gain + margin_error
# part 3. is the typical length of pregnancies
# less than 39 weeks?
# H_0: mu = 39
# H_1: mu < 39
# p-val = P(T < t)
# alpha = 0.05
t.test(na.omit(nc$weeks), mu=39, alternative="l", conf.level=0.9)
pval_pt2$p.value
# part 3. is the typical length of pregnancies
# less than 39 weeks?
# H_0: mu = 39
# H_1: mu < 39
# p-val = P(T < t)
# alpha = 0.05
pval_pt2 = t.test(na.omit(nc$weeks), mu=39, alternative="l", conf.level=0.9)
pval_pt2$p.value
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == "young mom"]$gain
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == "young mom"]
View(young_gain)
View(young_gain)
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == 'young mom']
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == 'young mom',]
View(young_gain)
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == 'mature mom',]
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == "younger mom",]
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = nc[nc$mature == "younger mom",]$gained
mature_gain = nc[nc$mature == "mature mom"]$gained
mature_gain = nc[nc$mature == "mature mom",]$gained
mean_mature = mean(mature_gain)
mean_young = mean(young_gain)
# test statistics
t_stat = (mu_young - mu_mature) / sqrt(((s_young^2)/length(young_gain)) + ((s_mature^2)/length(mature_gain)))
# get the standard deviations
s_young = sd(young_gain)
s_mature = sd(mature_gain)
# get the means
mu_young = mean(young_gain)
mu_mature = mean(mature_gain)
# test statistics
t_stat = (mu_young - mu_mature) / sqrt(((s_young^2)/length(young_gain)) + ((s_mature^2)/length(mature_gain)))
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
# define the two sets of data
young_gain = na.omit(nc[nc$mature == "younger mom",]$gained)
mature_gain = na.omit(nc[nc$mature == "mature mom",]$gained)
# get the means
mu_young = mean(young_gain)
mu_mature = mean(mature_gain)
# get the standard deviations
s_young = sd(young_gain)
s_mature = sd(mature_gain)
# test statistics
t_stat = (mu_young - mu_mature) / sqrt(((s_young^2)/length(young_gain)) + ((s_mature^2)/length(mature_gain)))
# p-val
p_val_pt3 = t.test(young_gain, mature_gain)
# p-val
pval_pt3 = t.test(young_gain, mature_gain)
View(pval_pt3)
pval_pt3$p.value
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
pval_pt3 = t.test(young_gain, mature_gain, conf.level=0.9)
pval_pt3$p.value
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
pval_pt3 = t.test(young_gain, mature_gain, conf.level=0.95)
pval_pt3$p.value
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
pval_pt3 = t.test(young_gain, mature_gain, conf.level=90)
pval_pt3$p.value
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
pval_pt3 = t.test(young_gain, mature_gain, conf.level=0.9)
pval_pt3$p.value
View(pval_pt3)
# import libraries
require("ggplot2")
require("latex2exp")
# load the data
load("data/nc.Rdata")
# part 1. chi-square test on low birth weight
# in smoking and non-smoking mothers
# H_0: there is no difference
# H_1: there is a difference
# alpha = 0.05.
pval_pt1 = chisq.test(table(nc$habit, nc$lowbirthweight))
pval_pt1$p.value
# part 2. a 90% confidence interval for the
# weight gained by mother during pregnancy
# remove rows that contain an NA in the gain column
gain_data = na.omit(nc$gained)
# calculate some values to use later
mean_gain = mean(gain_data)
n_samples = length(gain_data)
margin_error = qt(0.9, n_samples - 1)*(sd(gain_data)/sqrt(n_samples))
# calculate the lower and upper bounds of the CI
ci_low = mean_gain - margin_error
ci_hi = mean_gain + margin_error
# part 3. is the typical length of pregnancies
# less than 39 weeks?
# H_0: mu = 39
# H_1: mu < 39
# p-val = P(T < t)
# alpha = 0.05
pval_pt2 = t.test(
na.omit(nc$weeks),
mu=39,
alternative="l",
conf.level=0.9
)
pval_pt2$p.value
# bonus. do younger mothers and mature mothers have different
# expected weight gains?
# H_0: mu_y = mu_m
# H_1: mu_y =/= mu_m
# p-val = 2*P(T > |t|)
# alpha = 0.05
pval_pt3 = t.test(young_gain, mature_gain, conf.level=0.9)
# define young_gain and mature_gain data
young_gain = na.omit(nc[nc$mature == "younger mom",]$gained)
mature_gain = na.omig(nc[nc$mature == "mature mom",]$gained)
mature_gain = na.omit(nc[nc$mature == "mature mom",]$gained)
# conduct t-test
pval_pt3 = t.test(young_gain, mature_gain, conf.level=0.9)
pval_pt3$p.value
View(pval_pt3)
View(pval_pt1)
View(pval_pt2)
View(pval_pt2)
View(pval_pt3)
pchisq(248.889, 3)
pchisq(248.889, 2)
1 - pchisq(248.889, 3)
qt(0.9, 24)
qt(0.95,24)
1 - pchisq(20.93,4)
pt(18.4027, 51)
pt(-18.4027, 51)
qt(0.95, 25-1)/(sqrt(25))
n=1; qt(0.95, n-1)/(sqrt(n))
n = 10
qt(0.95, n-1)/sqrt(n)
n = 100
qt(0.95, n-1)/sqrt(n)
n = 200
qt(0.95, n-1)/sqrt(n)
n = 300
qt(0.95, n-1)/sqrt(n)
n = 290
qt(0.95, n-1)/sqrt(n)
n = 280
qt(0.95, n-1)/sqrt(n)
n = 270
qt(0.95, n-1)/sqrt(n)
n = 271
qt(0.95, n-1)/sqrt(n)
n = 275
qt(0.95, n-1)/sqrt(n)
n = 274
qt(0.95, n-1)/sqrt(n)
n = 273
qt(0.95, n-1)/sqrt(n)
n = 272
qt(0.95, n-1)/sqrt(n)
n = 273
qt(0.95, n-1)/sqrt(n)
n = 273
qt(0.995, n-1)/sqrt(n)
n = 400
qt(0.995, n-1)/sqrt(n)
n = 600
qt(0.995, n-1)/sqrt(n)
n = 650
qt(0.995, n-1)/sqrt(n)
n = 690
qt(0.995, n-1)/sqrt(n)
n = 680
qt(0.995, n-1)/sqrt(n)
n = 670
qt(0.995, n-1)/sqrt(n)
n = 660
qt(0.995, n-1)/sqrt(n)
n = 665
qt(0.995, n-1)/sqrt(n)
n = 669
qt(0.995, n-1)/sqrt(n)
n = 668
qt(0.995, n-1)/sqrt(n)
n = 667
qt(0.995, n-1)/sqrt(n)
-0.545 + qt(0.955, 199)(8.887/200)
-0.545 + qt(0.955, 199)*(8.887/200)
-0.545 - qt(0.955, 199)*(8.887/200)
